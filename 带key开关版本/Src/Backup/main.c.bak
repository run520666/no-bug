/* USER CODE BEGIN Header */
/**
******************************************************************************
* @file           : main.c
* @brief          : Main program body
******************************************************************************
* @attention
*
* <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
* All rights reserved.</center></h2>
*
* This software component is licensed by ST under BSD 3-Clause license,
* the "License"; You may not use this file except in compliance with the
* License. You may obtain a copy of the License at:
*                        opensource.org/licenses/BSD-3-Clause
*
******************************************************************************
*/
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "bsp_can.h"
#include "CAN_receive.h"
#include "ps2.h"
#include "pid.h"
#include "usart.h"
#include "mecanum_control.h"
#include "encoder_position.h"
#include "command_parser.h"
#include <math.h>
#include <string.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define WHEEL_FR 0  // 右前�?
#define WHEEL_FL 1  // 左前�?
#define WHEEL_BL 2  // 左后�?
#define WHEEL_BR 3  // 右后�?
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
PID_TypeDef motor_pid[4];
char tx_buffer[1000];
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;  // 确保你已经在别处定义了这个句�?
extern volatile uint8_t uart_tx_done;
extern void UART1_Send_DMA(uint8_t *buf, uint16_t len);

// 麦克纳姆轮控制结构体
mecanum_control_t mecanum;

// 编码器位置反馈结构体
encoder_position_t encoder_position;

// 命令解析器
command_parser_t cmd_parser;

// 串口接收缓冲区
uint8_t uart_rx_char = 0;
 
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void UART1_Send_DMA(uint8_t *buf, uint16_t len);
void UART1_Send_IT(uint8_t *buf, uint16_t len);

// 坐标导航示例函数
void navigation_demo(void);
void goto_coordinate(float x, float y);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

//float wheel_speed_FR;
//float wheel_speed_FL;
//float wheel_speed_BL;
//float wheel_speed_BR;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_CAN1_Init();
  MX_CAN2_Init();
  MX_USART1_UART_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
can_filter_init();
  
  // 修改 PID 初始化代码
  for (int i = 0; i < 4; i++) {
    pid_init(&motor_pid[i]);
    motor_pid[i].f_param_init(&motor_pid[i], PID_Speed, 4000, 500, 10, 10, 4000, 500, 3.7, 0.1, 0.05);    
        // PID模式（位置或速度）、最大输出、积分限幅、死区（绝对值）、控制周期、最大误差、目标值、kp、ki、kd）
        //开始版本kp=2.5，ki=0.1
        //初步调试kp=3.7，ki=0.1，kd=0.05
        //p2.7,i0.1,d0.05-0.1不错
    motor_pid[i].target = mecanum.wheel_speed[i];
  }
  
  // 初始化编码器位置反馈
  encoder_position_init(&encoder_position);
  
  // 初始化麦克纳姆轮控制
  mecanum_init(&mecanum);
  
  // 设置编码器位置反馈
  mecanum_set_encoder(&mecanum, &encoder_position);
  
  // 初始化命令解析器
  command_parser_init(&cmd_parser, &mecanum, &encoder_position);
  
  // 启动串口接收中断
  static uint8_t rx_char;
  HAL_UART_Receive_IT(&huart1, &rx_char, 1);
  
  static uint8_t is_pa0_pressed = 0; // 按键状态标志
  
  // 欢迎信息和帮助
  printf("=== Mecanum Wheel Navigation System ===\n");
  printf("System initialized successfully!\n");
  printf("Type 'help' for available commands\n");
  printf("Example: goto 1000 500 (navigate to x=1000mm, y=500mm)\n");
  printf("======================================\n");
  
  // ========== 坐标导航使用示例 ==========
  // 方法1: 直接调用goto_coordinate函数导航到指定坐标
  // 取消注释下面任意一行来测试：
  
  // goto_coordinate(1000.0f, 0.0f);      // 前进到 (1000, 0)
  // goto_coordinate(500.0f, 500.0f);     // 导航到 (500, 500)
  // goto_coordinate(-500.0f, 0.0f);      // 后退到 (-500, 0)
  
  // 方法2: 使用原始函数
  // mecanum_goto_position(&mecanum, 1000.0f, 500.0f);
  
  // 方法3: 启动自动演示（取消注释下面一行）
  // navigation_demo();  // 自动导航演示，会依次访问4个点
  
  printf(">>> Ready for navigation commands <<<\n");
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
    uint8_t pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
    HAL_Delay(10); // 确保读取稳定
    if (pin_state == GPIO_PIN_RESET) // PA0低电平
    {
        is_pa0_pressed = 1;// 设置按键按下标志
        mecanum_stop(&mecanum); // 停止小车运动
        CAN_cmd_chassis(0, 0, 0, 0); // 发送停止指令
        continue; // 跳过后续逻辑
    }
    if (is_pa0_pressed == 0)// 处理正常状态下的逻辑
    {
      goto_coordinate(1000.0f, 0.0f);
    }
    
    // 更新编码器位置反馈
    int32_t encoder_data[4];
    for (int i = 0; i < 4; i++) {
        const motor_measure_t *motor_data = get_chassis_motor_measure_point(i);
        if (motor_data) {
            encoder_data[i] = motor_data->ecd;
        }
    }
    encoder_position_update(&encoder_position, encoder_data);
    
    // 获取当前位置
    float current_x, current_y, current_angle;
    encoder_position_get(&encoder_position, &current_x, &current_y, &current_angle);
    
    // 处理串口命令
    command_parser_process(&cmd_parser);
    
    // 更新导航控制
    mecanum_nav_update(&mecanum);
    
    // 如果启用了导航演示，继续执行演示
    // navigation_demo();  // 取消注释这行来启用自动演示
    
    // 获取导航状态
    nav_state_t nav_state = mecanum_nav_get_state(&mecanum);
    float distance_to_target = mecanum_nav_get_distance_to_target(&mecanum);
    
    // 更新PID控制
    for (int i = 0; i < 4; i++) 
    {
        motor_pid[i].target = mecanum.wheel_speed[i];
        const motor_measure_t *motor_data = get_chassis_motor_measure_point(i);
        if (motor_data) {
            motor_pid[i].f_cal_pid(&motor_pid[i], motor_data->speed_rpm);
        } 
    }
    
    // 发送电机控制指令
    CAN_cmd_chassis(motor_pid[0].output, motor_pid[1].output, motor_pid[2].output, motor_pid[3].output);
    
    // 每1秒打印一次状态信息
    static uint32_t print_timer = 0;
    if (current_time - print_timer > 1000) {
        print_timer = current_time;
        
        printf("=== Robot Status ===\n");
        printf("Position: X=%.1f, Y=%.1f, Angle=%.2f\n", current_x, current_y, current_angle * 180.0f / 3.14159f);
        printf("Navigation State: %d, Distance to target: %.1f mm\n", nav_state, distance_to_target);
        printf("Wheel speeds: [%.0f, %.0f, %.0f, %.0f] rpm\n", 
               mecanum.wheel_speed[0], mecanum.wheel_speed[1], 
               mecanum.wheel_speed[2], mecanum.wheel_speed[3]);
        printf("==================\n");
    }
    
    // 示例：检查是否到达目标位置
    static uint8_t arrival_notified = 0;
    if (mecanum_is_arrived(&mecanum) && !arrival_notified) {
        printf(">>> Target position reached! <<<\n");
        arrival_notified = 1;
    }
    // 当开始新的导航时重置通知标志
    static nav_state_t last_nav_state = NAV_IDLE;
    if (nav_state == NAV_MOVING && last_nav_state != NAV_MOVING) {
        arrival_notified = 0;
    }
    last_nav_state = nav_state;
    
    HAL_Delay(10); // 10ms控制周期
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 6;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/**
  * @brief          简化的坐标导航函数 - 供main函数调用
  * @param[in]      x: 目标X坐标 (mm)
  * @param[in]      y: 目标Y坐标 (mm)
  * @retval         none
  * @note           这个函数封装了导航功能，直接在main中调用即可
  */
void goto_coordinate(float x, float y)
{
    printf(">>> Going to position (%.1f, %.1f) mm <<<\n", x, y);
    mecanum_goto_position(&mecanum, x, y);
}

/**
  * @brief          导航演示函数 - 展示自动导航序列
  * @retval         none
  * @note           演示如何使用坐标导航功能
  */
void navigation_demo(void)
{
    static uint32_t demo_timer = 0;
    static uint8_t demo_step = 0;
    static uint8_t demo_enabled = 0;
    uint32_t current_time = HAL_GetTick();
    
    // 启动演示（第一次调用时）
    if (!demo_enabled) {
        demo_enabled = 1;
        demo_timer = current_time;
        printf(">>> Navigation Demo Started <<<\n");
    }
    
    // 每5秒执行下一步，或者当前任务完成时
    if ((current_time - demo_timer > 5000) || mecanum_is_arrived(&mecanum)) {
        demo_timer = current_time;
        
        switch (demo_step) {
            case 0:
                goto_coordinate(1000.0f, 0.0f);    // 前进1米
                break;
            case 1:
                goto_coordinate(1000.0f, 1000.0f); // 右移1米
                break;
            case 2:
                goto_coordinate(0.0f, 1000.0f);    // 后退1米
                break;
            case 3:
                goto_coordinate(0.0f, 0.0f);       // 左移回原点
                break;
            case 4:
                mecanum_stop_navigation(&mecanum);  // 停止演示
                printf(">>> Navigation Demo Completed <<<\n");
                demo_enabled = 0;
                demo_step = 0;
                return;
        }
        demo_step++;
    }
}

/**
  * @brief          UART接收中断回调函数
  * @param[in]      huart: UART句柄
  * @retval         none
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    static uint8_t rx_char;
    
    if (huart == &huart1)
    {
        // 处理接收到的字符
        command_parser_input_char(&cmd_parser, rx_char);
        
        // 重新启动接收
        HAL_UART_Receive_IT(&huart1, &rx_char, 1);
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
/* User can add his own implementation to report the file name and line number,
 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
